import pytest

from tox_passenv import __version__
from tox_passenv.plugin import tox4


def test_version(tox_project):
    """
    - run tox --version
    - check if return code is 0
    - check if output contains plugin name and its version
    """
    result = tox_project().run(["--version"])
    assert not result.returncode
    expected_version = "tox-passenv-" + __version__
    assert expected_version in result.stdout
    assert not result.stderr


@pytest.mark.parametrize(
    # config option, var name, expected var value
    "passenv_data",
    [
        ("# no passenv/pass_env", "FOOBAR", "NOT_SET"),
        ("pass_env", "FOOBAR", "foobar"),
        ("passenv", "FOOBAR", "foobar"),
    ],
    ids=[
        "no_passenv-no_pass_env",
        "pass_env-no_passenv",
        "passenv-no_pass_env",
    ],
)
@pytest.mark.skipif(not tox4, reason="requires tox4")
def test_plugin_usage(tox_project, monkeypatch, passenv_data):
    """
    - set env var values to be passed
    - set TOX_TESTENV_PASSENV
    - set or unset passenv, pass_env in tox config
    - run tox
    - check the log record generated by this plugin
    - check environment variable inside test env
    """
    option, pass_name, expected_var_value = passenv_data
    project = tox_project()
    env_name = "py"

    # can be changed by tox
    tox_log_prefix = f"{env_name}: "

    # set env variable controlled by tox configuration
    monkeypatch.setenv(pass_name, pass_name.lower())

    # set env variables controlled by TOX_TESTENV_PASSENV
    additional_var_names = ["FOO", "BAR"]
    monkeypatch.setenv("TOX_TESTENV_PASSENV", " ".join(additional_var_names))

    env_vars_commands = ""
    for var in additional_var_names + [pass_name]:
        monkeypatch.setenv(var, var.lower())
        env_vars_commands += (
            f'print("{var}:", os.environ.get("{var}", "NOT_SET"));'
        )

    command_template = f"python -c 'import os;{env_vars_commands}'"

    project.contents[
        "tox.ini"
    ] = f"""\
        [tox]
        env_list = {env_name}
        [testenv]
        {option} = {pass_name}
        commands =
          {command_template}
        """
    project.create()
    result = project.run(["-v"])
    assert not result.returncode
    assert not result.stderr

    # must only be passed for run environments
    assert (
        result.stdout.count(
            "passing additional environment variables for test env "
        )
        == 1
    )

    stdout_lines = result.stdout.splitlines()
    # check the exact logging record
    expected_msg = (
        f"{tox_log_prefix}passing additional environment variables "
        f"for test env {env_name}: {', '.join(additional_var_names)}"
    )
    assert expected_msg in stdout_lines
    # check the passed env var's value
    assert f"{pass_name}: {expected_var_value}" in stdout_lines
    # check the additional passed env var's values
    for var in additional_var_names:
        assert f"{var}: {var.lower()}" in stdout_lines


@pytest.mark.parametrize(
    # config option, var name, expected var value
    "passenv_data",
    [
        ("# no passenv/pass_env", "FOOBAR", "NOT_SET"),
        ("pass_env", "FOOBAR", "foobar"),
        ("passenv", "FOOBAR", "foobar"),
    ],
    ids=[
        "no_passenv-no_pass_env",
        "pass_env-no_passenv",
        "passenv-no_pass_env",
    ],
)
@pytest.mark.skipif(not tox4, reason="requires tox4")
def test_no_plugin_usage(tox_project, monkeypatch, passenv_data):
    """
    - set env var values to be passed and to be not passed
    - unset TOX_TESTENV_PASSENV
    - set or unset passenv, pass_env in tox config
    - run tox
    - check no the log record generated by this plugin
    - check no additional environment variable inside test env
    """
    option, pass_name, expected_var_value = passenv_data
    project = tox_project()
    env_name = "py"

    # set env variable controlled by tox configuration
    monkeypatch.setenv(pass_name, pass_name.lower())

    # set env variable that is not passed by TOX_TESTENV_PASSENV
    additional_var_names = ["FOO"]
    monkeypatch.delenv("TOX_TESTENV_PASSENV", raising=False)

    env_vars_commands = ""
    for var in additional_var_names + [pass_name]:
        monkeypatch.setenv(var, var.lower())
        env_vars_commands += (
            f'print("{var}:", os.environ.get("{var}", "NOT_SET"));'
        )

    command_template = f"python -c 'import os;{env_vars_commands}'"

    project.contents[
        "tox.ini"
    ] = f"""\
        [tox]
        env_list = {env_name}
        [testenv]
        {option} = {pass_name}
        commands =
          {command_template}
        """
    project.create()
    result = project.run(["-v"])
    assert not result.returncode
    assert not result.stderr

    assert not result.stdout.count(
        "passing additional environment variables for test env "
    )

    stdout_lines = result.stdout.splitlines()
    # check the passed env var's value
    assert f"{pass_name}: {expected_var_value}" in stdout_lines
    # check no the additional env vars are passed
    for var in additional_var_names:
        assert f"{var}: NOT_SET" in stdout_lines


@pytest.mark.skipif(tox4, reason="requires tox3")
def test_no_plugin_usage_tox3(tox_project, monkeypatch):
    """
    - set env var values to be passed
    - set TOX_TESTENV_PASSENV
    - run tox3
    - check environment variable inside test env
    """
    project = tox_project()
    env_name = "py"

    # set env variables controlled by TOX_TESTENV_PASSENV
    additional_var_names = ["FOO", "BAR"]
    monkeypatch.setenv("TOX_TESTENV_PASSENV", " ".join(additional_var_names))

    env_vars_commands = ""
    for var in additional_var_names:
        monkeypatch.setenv(var, var.lower())
        env_vars_commands += (
            f'print("{var}:", os.environ.get("{var}", "NOT_SET"));'
        )

    command_template = f"python -c 'import os;{env_vars_commands}'"

    project.contents[
        "tox.ini"
    ] = f"""\
        [tox]
        env_list = {env_name}
        [testenv]
        skip_install = True
        commands =
          {command_template}
        """
    project.create()
    result = project.run(["-v"])
    assert not result.returncode
    assert not result.stderr

    stdout_lines = result.stdout.splitlines()
    # check the additional passed env var's values
    for var in additional_var_names:
        assert f"{var}: {var.lower()}" in stdout_lines
